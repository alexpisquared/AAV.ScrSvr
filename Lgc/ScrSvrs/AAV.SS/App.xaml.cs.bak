using AAV.SS.Vws;
using AAV.Sys.AsLink;
using AsLink;
using Microsoft.Win32;
using System;
using System.Diagnostics;
using System.Globalization;
using System.Linq;
using System.Runtime.InteropServices;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Interop;
using System.Windows.Media.Animation;
using frm = System.Windows.Forms;

namespace AAV.SS
{
  public partial class App : Application
  {
    public static TraceSwitch
      AppTraceLevel_Config = new TraceSwitch("CfgTraceLevelSwitch", "Switch in config file:  <system.diagnostics><switches><!--0-off, 1-error, 2-warn, 3-info, 4-verbose. --><add name='CfgTraceLevelSwitch' value='3' /> "),
      AppTraceLevel_inCode = new TraceSwitch("Verbose________Trace", "This is the trace for all               messages.") { Level = TraceLevel.Verbose },
      AppTraceLevel_Warnng = new TraceSwitch("ErrorAndWarningTrace", "This is the trace for Error and Warning messages.") { Level = TraceLevel.Warning };

    static readonly TraceSource Tracer = new TraceSource("MyCompany.MyProduct.MyComponent");
    static readonly object _thisLock = new object();
    static bool _mustLogEORun = false;
    public static readonly DateTime Started = DateTime.Now;
    public const int
#if DEBUG
      GraceEvLogAndLockPeriodSec = 6,
      _ScrSvrShowDelayMs = 500;
#else
      GraceEvLogAndLockPeriodSec = 60,
      _ScrSvrShowDelayMs = 10;
#endif

    static readonly SpeechSynth _synth = new SpeechSynth(AppSettings.Instance.IsSpeechOn);
    public static void SpeakSynch(string msg) => _synth.SpeakSynch(msg);
    public static void SpeakAsync(string msg) => _synth.SpeakAsync(msg);



    protected override void OnStartup(StartupEventArgs sea)
    {
      try
      {
        base.OnStartup(sea);
        Bpr.BeepBgn3();
        Tracer.TraceInformation("&^%$#@ TraceInformation - what is it and where does it go?");

#if !_DEBUG_
        DevOpStartup.SetupTracingOptions("AAV.SS", AppTraceLevel_inCode);
#endif

        Trace.WriteLineIf(AppTraceLevel_inCode.TraceWarning, $"{DateTime.Now:yy.MM.dd-HH:mm:ss.f} +{(DateTime.Now - Started):mm\\:ss\\.ff}    StartUp()  {Environment.MachineName,-8}{VerHelper.CurVerStr(),-12}  {string.Join("·", sea.Args)} :");

        //if (Debugger.IsAttached) PerformanceCounterHelper.L1();

        //?what for LoadCompleted += (s, e) => (FindResource("Opacity_1MinLowCpu") as Storyboard).Duration = new Duration(TimeSpan.FromSeconds(10));

        Timeline.DesiredFrameRateProperty.OverrideMetadata(typeof(Timeline), new FrameworkPropertyMetadata { DefaultValue = 3 }); //tu: anim CPU usage GLOBAL reduction!!! (Aug2019: 10 was almost OK and <10% CPU. 60 is the deafult)

        Current.DispatcherUnhandledException += DevOpStartup.OnCurrentDispatcherUnhandledException;
        EventManager.RegisterClassHandler(typeof(TextBox), UIElement.GotFocusEvent, new RoutedEventHandler((s, re) => { (s as TextBox)?.SelectAll(); })); //tu: TextBox
                                                                                                                                                          //var f = @"C:\Users\apigida\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\CameraApp.lnk"; if (File.Exists(f))  Process.Start(f); //tu: from shell:AppsFolder !!!      

        //todo: AppSettings.InitStore(storageMode: StorageMode.OneDriveU);

        //? is this one keeping hanging? if (AppSettings.Instance.KeepAwake) KeepAwakeHelper.KeepAwakeForever();

        ShutdownMode = ShutdownMode.OnLastWindowClose; // jan2018

        if (sea.Args.Length > 0)
        {
          switch (sea.Args[0].ToLower(CultureInfo.InvariantCulture).Trim().Substring(0, sea.Args[0].Length < 2 ? 1 : 2))
          {
            default: Trace.WriteLineIf(AppTraceLevel_inCode.TraceWarning, $"  Unknown Args (Knowns are: /s /p /c up -u /u lo)"); goto case "/s";
            case "lo": Trace.WriteLineIf(AppTraceLevel_inCode.TraceWarning, $"  LogMore is ON.              "); AppTraceLevel_inCode = new TraceSwitch("VerboseTrace", "This is the VERBOSE trace for all messages") { Level = System.Diagnostics.TraceLevel.Verbose }; goto case "/s";
            case "/s": break;                                       // Run the Screen Saver.
            case "/p": showMiniScrSvr(sea.Args[1]); return;           // <HWND> - Preview Screen Saver as child of window <HWND>.
            case "/c": new SettingsWindow().ShowDialog(); return;   // Show the Settings dialog box, modal to the foreground window.
            case "up":
            case "-u":
            case "/u": new UpTimeReview2(false).Show(); return;     // uptime review.
            case "si":                                              // SilentDbUpdate
              var evNo = EvLogHelper.UpdateEvLogToDb(15, $"");
              var rprt = $"{(evNo < -3 ? "No" : evNo.ToString())} new events found/stored to MDB file.";
              SpeakSynch(rprt);
              Trace.WriteLineIf(AppTraceLevel_inCode.TraceWarning, $"{DateTime.Now:yy.MM.dd-HH:mm:ss.f} +{(DateTime.Now - Started):mm\\:ss\\.ff}    StartUp() - {rprt}");
              Shutdown(); return;
          }
        }

        showFullScrSvr();
      }
      catch (Exception ex) { MessageBox.Show(ex.Log(), System.Reflection.MethodBase.GetCurrentMethod().ToString()); }
    }

    internal void TglVis(string name, bool isVisible)
    {
      var vis = isVisible ? Visibility.Visible : Visibility.Collapsed;
      switch (name)
      {
        case "ContainerA": ((App)Application.Current).CntrA.Visibility = vis; AppSettings.Instance.CtrlA = isVisible; break;
        case "ContainerB": ((App)Application.Current).CntrB.Visibility = vis; AppSettings.Instance.CtrlB = isVisible; break;
        case "ContainerC": ((App)Application.Current).CntrC.Visibility = vis; AppSettings.Instance.CtrlC = isVisible; break;
        case "ContainerD": ((App)Application.Current).CntrD.Visibility = vis; AppSettings.Instance.CtrlD = isVisible; break;
        case "ContainerE": ((App)Application.Current).CntrE.Visibility = vis; AppSettings.Instance.CtrlE = isVisible; break;
        case "ContainerF": ((App)Application.Current).CntrF.Visibility = vis; AppSettings.Instance.CtrlF = isVisible; break;
        case "ContainerG": ((App)Application.Current).CntrG.Visibility = vis; AppSettings.Instance.CtrlG = isVisible; break;
        case "ContainerH": ((App)Application.Current).CntrH.Visibility = vis; AppSettings.Instance.CtrlH = isVisible; break;
        case "ContainerI": ((App)Application.Current).CntrI.Visibility = vis; AppSettings.Instance.CtrlI = isVisible; break;
        case "ContainerJ": ((App)Application.Current).CntrJ.Visibility = vis; AppSettings.Instance.CtrlJ = isVisible; break;
        case "ContainerK": ((App)Application.Current).CntrK.Visibility = vis; AppSettings.Instance.CtrlK = isVisible; break;
        default: break;
      }

    }

    protected override void OnExit(ExitEventArgs e) {                           /* KeepAwakeHelper.Restore();*/ LogScrSvrUptime("ScrSvr - Dn - App.OnExit()      \r\n"); /*Trace.WriteLineIf(TraceLevel.TraceWarning, $"{DateTime.Now:yy.MM.dd-HH:mm:ss.f} +{(DateTime.Now - Started):mm\\:ss\\.ff} App.OnExit()         ");*/ base.OnExit(e); }
    protected override void OnDeactivated(EventArgs e) {                        /* KeepAwakeHelper.Restore();*/ LogScrSvrUptime("ScrSvr - Dn - App.OnDeactivated().  "); /*Trace.WriteLineIf(TraceLevel.TraceWarning, $"{DateTime.Now:yy.MM.dd-HH:mm:ss.f} +{(DateTime.Now - Started):mm\\:ss\\.ff} App.OnDeactivated()  ");*/ base.OnDeactivated(e); }
    protected override void OnSessionEnding(SessionEndingCancelEventArgs e) {   /* KeepAwakeHelper.Restore();*/ LogScrSvrUptime("ScrSvr - Dn - App.OnSessionEnding()."); /*Trace.WriteLineIf(TraceLevel.TraceWarning, $"{DateTime.Now:yy.MM.dd-HH:mm:ss.f} +{(DateTime.Now - Started):mm\\:ss\\.ff} App.OnSessionEnding()");*/ base.OnSessionEnding(e); }

    static int _ssto = -1; public static int ScrSvrTimeoutSec
    {
      get
      {
        if (_ssto < 0)
        {
          if (!int.TryParse(Registry.GetValue(@"HKEY_CURRENT_USER\Control Panel\Desktop", "ScreenSaveTimeOut", 300).ToString(), out _ssto))
            _ssto = 300;
        }

        return _ssto;
      }
    }
    public static int Ssto_Gp => ScrSvrTimeoutSec + GraceEvLogAndLockPeriodSec;  // ScreenSaveTimeOut + Grace Period

    public static void LogScrSvrUptime(string msg)
    {
      Trace.WriteLineIf(AppTraceLevel_inCode.TraceWarning, $"{DateTime.Now:yy.MM.dd-HH:mm:ss.f} +{(DateTime.Now - Started):mm\\:ss\\.ff}    {msg}");

      lock (_thisLock)
      {
        if (_mustLogEORun)
        {
#if DEBUG
          SpeakSynch($"no end-up logging.");
#else
          _mustLogEORun = false;
          EvLogHelper.LogScrSvrEnd(App.Started.AddSeconds(-ScrSvrTimeoutSec), ScrSvrTimeoutSec, msg);
#endif
        }
      }

      Bpr.BeepEnd3();
    }

    void showMiniScrSvr(string args1)
    {
      var whndl = long.TryParse(args1, out var tempLong) ? new IntPtr(tempLong) : IntPtr.Zero;

      var miniSS = new MiniScrSvrWindow();

      var parentRectangle = RECT.GetClientRect(whndl);

      var hwndSourceParameters = new System.Windows.Interop.HwndSourceParameters
      {
        Width = parentRectangle.Right - parentRectangle.Left == 0 ? 152 : parentRectangle.Right - parentRectangle.Left,
        Height = parentRectangle.Bottom - parentRectangle.Top == 0 ? 112 : parentRectangle.Bottom - parentRectangle.Top,
        //ParentWindow = whndl,
        PositionX = 0,
        PositionY = 0,
        //WindowStyle = (int)(WS.VISIBLE | WS.CHILD | WS.CLIPCHILDREN)
      };

      if (whndl != IntPtr.Zero)
      {
        hwndSourceParameters.ParentWindow = whndl;
        hwndSourceParameters.WindowStyle = (int)(WS.VISIBLE | WS.CHILD | WS.CLIPCHILDREN);
      }
      else
        hwndSourceParameters.WindowStyle = (int)(WS.VISIBLE);

      miniSS.Height = hwndSourceParameters.Height;
      miniSS.Width = hwndSourceParameters.Width;
      miniSS.Visibility = whndl == IntPtr.Zero ? Visibility.Visible : Visibility.Hidden;
      miniSS.Title = $"{VerHelper.CurVerStr()} \n\n  {miniSS.Width} x {miniSS.Height} \n\n     Slp: {AppSettings.Instance.AutoSleep}   Htr: {AppSettings.Instance.IsHeaterOn}";

      var _HwndSource = new HwndSource(hwndSourceParameters) { RootVisual = miniSS.LayoutRoot };
      _HwndSource.Disposed += (s, e) => miniSS.Close();
    }
    void showFullScrSvr()
    {

      Task.Run(async () => await Task.Delay(_ScrSvrShowDelayMs)).ContinueWith(_ =>
      {
      }, TaskScheduler.FromCurrentSynchronizationContext());

      Task.Run(async () => await Task.Delay((GraceEvLogAndLockPeriodSec - 55) * 1000)).ContinueWith(_ => SpeakAsync($"a 55"));
      Task.Run(async () => await Task.Delay((GraceEvLogAndLockPeriodSec - 50) * 1000)).ContinueWith(_ => SpeakAsync($"a 50"));
      Task.Run(async () => await Task.Delay((GraceEvLogAndLockPeriodSec - 45) * 1000)).ContinueWith(_ => SpeakAsync($"a 45"));
      Task.Run(async () => await Task.Delay((GraceEvLogAndLockPeriodSec - 40) * 1000)).ContinueWith(_ => SpeakAsync($"a 40"));
      Task.Run(async () => await Task.Delay((GraceEvLogAndLockPeriodSec - 30) * 1000)).ContinueWith(_ => SpeakAsync($"a 30"));
      Task.Run(async () => await Task.Delay((GraceEvLogAndLockPeriodSec - 20) * 1000)).ContinueWith(_ => SpeakAsync($"a 20"));
      Task.Run(async () => await Task.Delay((GraceEvLogAndLockPeriodSec - 10) * 1000)).ContinueWith(_ => SpeakAsync($"a 10"));

#if DEBUG
#else
      //puzzle: runs 50 sec delay for all and read all at that moment: for (var i = 50; i > 0; i -= 5)        Task.Run(async () => await Task.Delay((GraceEvLogAndLockPeriodSec - i) * 1000)).ContinueWith(_ => SpeakAsync($"{i}+{i}=x"));
#endif
      Task.Run(async () => await Task.Delay((GraceEvLogAndLockPeriodSec - 5) * 1000)).ContinueWith(_ => SpeakAsync($"5"));
      Task.Run(async () => await Task.Delay((GraceEvLogAndLockPeriodSec - 3) * 1000)).ContinueWith(_ => SpeakAsync($"3"));
      Task.Run(async () => await Task.Delay((GraceEvLogAndLockPeriodSec - 2) * 1000)).ContinueWith(_ => SpeakAsync($"2"));
      Task.Run(async () => await Task.Delay((GraceEvLogAndLockPeriodSec - 1) * 1000)).ContinueWith(_ => SpeakAsync($"1"));

      Task.Run(async () => await Task.Delay(GraceEvLogAndLockPeriodSec * 1000)).ContinueWith(lockAndLog(), TaskScheduler.FromCurrentSynchronizationContext());


      foreach (var item in frm.Screen.AllScreens)        showBackgroundWindow(item, new BackgroundWindow());
      new ControlPanel().Show();
    }

    static Action<Task> lockAndLog() => _ =>
    {
      SpeakAsync($"0");
      _mustLogEORun = true;

#if DEBUG
      SpeakAsync($"no start-up event logging");
#else
      EvLogHelper.LogScrSvrBgn(App.Ssto_Gp);
#endif

      Task.Run(async () => await App.SleepLogic());
      Task.Run(async () => await App.LockeLogic());
    };

    static string watermarkInfoMsg(frm.Screen screen, Window window) => $" {string.Join("\n", Environment.GetCommandLineArgs())}" +
                                                                        $"\r\n\n {screen.DeviceName} - {(screen.Primary ? "Primary  " : "Secondary")}   XY: {screen.Bounds.X,5} x {screen.Bounds.Y,-5}" + // always NaN / 0: ► Left-Top: {(double.IsNaN(window.Left) ? -1.0 : window.Left)}-{(double.IsNaN(window.Top) ? -1.0 : window.Top)}   Actual W x H: {window.ActualWidth}x{window.ActualHeight}" +
                                                                        $"\r\n\n {(VerHelper.IsVIP ? "VIP  :)" : "!vip   :(")}      {VerHelper.CurVerStr()}";
    static void showBackgroundWindow(frm.Screen trgScreen, Window backgroundWindow)
    {
      backgroundWindow.Title = watermarkInfoMsg(trgScreen, backgroundWindow);
      backgroundWindow.Left = trgScreen.Bounds.Left;
      backgroundWindow.Top = trgScreen.Bounds.Top;

#if DEBUG
      backgroundWindow.Width = trgScreen.Bounds.Width / 4;
      backgroundWindow.Height = trgScreen.Bounds.Height / 4;
#else
      backgroundWindow.SourceInitialized += (snd, arg) => backgroundWindow.WindowState = WindowState.Maximized;      //tu: Miximized on target screen.
#endif

      backgroundWindow.Show();

      Debug.WriteLine($"  {backgroundWindow.Title.Replace("\r", " ").Replace("\n", " ")}");
    }
    public static void SleepStandby(bool isDeepHyberSleep = false)
    {
      Trace.WriteLineIf(AppTraceLevel_inCode.TraceWarning, $"{DateTime.Now:yy.MM.dd-HH:mm:ss.f} +{(DateTime.Now - Started):mm\\:ss\\.ff}>\t {(isDeepHyberSleep ? "Hibernating" : "LightSleeping")} started.");
      SetSuspendState(isDeepHyberSleep, true, true);
    }

    [DllImport("Powrprof.dll", CharSet = CharSet.Auto, ExactSpelling = true)] public static extern bool SetSuspendState(bool hiberate, bool forceCritical, bool disableWakeEvent);
    [DllImport("user32")] public static extern void LockWorkStation();

    public static async Task SleepLogic()
    {
      if (VerHelper.IsVIP && !AppSettings.Instance.AutoSleep)
      {
        App.SpeakSynch("Sleepless mode");
      }
      else
      {
        App.SpeakAsync($"Armed! Napping in   {AppSettings.Instance.Min2Sleep} minutes.");
        await Task.Delay(TimeSpan.FromMinutes(AppSettings.Instance.Min2Sleep));      //  Application.SetSuspendState(PowerState.Hibernate, true, false);
        App.SpeakAsync($"                    {AppSettings.Instance.Min2Sleep} minutes has passed. Sending computer to a light non-hibernating sleep in a minute ..."); //try to speak async so that dismissal by user was possible (i.e., not locked the UI):
        await Task.Delay(TimeSpan.FromSeconds(60));
        App.SpeakSynch($"Enforcing sleep now.");

        EvLogHelper.UpdateEvLogToDb(10, $"The Enforcing-Sleep moment.");

        App.LogScrSvrUptime("ScrSvr - Dn - Sleep enforced by AAV.scr!");
        App.SleepStandby(); //Environment.MachineName.ToLower() == "nuc2");

        //never showing up: MessageBox.Show("ScrSvr - Dn - Sleep enforced by AAV.scr!");
        //App.Shutdown();
      }
    }
    public static async Task LockeLogic()
    {
      if (VerHelper.IsVIP && !AppSettings.Instance.AutoLocke)
      {
        App.SpeakSynch("Lockeless mode");
      }
      else
      {
        App.SpeakAsync($"Locking in          {AppSettings.Instance.Min2Locke} minutes.");
        await Task.Delay(TimeSpan.FromMinutes(AppSettings.Instance.Min2Locke));      //  Application.SetSuspendState(PowerState.Hibernate, true, false);
        App.SpeakAsync($"                    {AppSettings.Instance.Min2Locke} minutes has passed. Computer to be Locked in a minute ..."); //try to speak async so that dismissal by user was possible (i.e., not locked the UI):
        await Task.Delay(TimeSpan.FromSeconds(60));
        App.SpeakSynch($"Enforcing lock down now.");

        LockWorkStation();
      }
    }

    Window _CntrA; public Window CntrA => _CntrA ?? (_CntrA = new ContainerA());
    Window _CntrB; public Window CntrB => _CntrB ?? (_CntrB = new ContainerB());
    Window _CntrC; public Window CntrC => _CntrC ?? (_CntrC = new ContainerC());
    Window _CntrD; public Window CntrD => _CntrD ?? (_CntrD = new ContainerD());
    Window _CntrE; public Window CntrE => _CntrE ?? (_CntrE = new ContainerE());
    Window _CntrF; public Window CntrF => _CntrF ?? (_CntrF = new ContainerF());
    Window _CntrG; public Window CntrG => _CntrG ?? (_CntrG = new ContainerG());
    Window _CntrH; public Window CntrH => _CntrH ?? (_CntrH = new ContainerH());
    Window _CntrI; public Window CntrI => _CntrI ?? (_CntrI = new ContainerI());
    Window _CntrJ; public Window CntrJ => _CntrJ ?? (_CntrJ = new ContainerJ());
    Window _CntrK; public Window CntrK => _CntrK ?? (_CntrK = new ContainerK());
  }

  [Flags]
  public enum WS //     Window styles
  {
    CLIPCHILDREN = 33554432,
    VISIBLE = 268435456,
    CHILD = 1073741824,
  }
}

/// Install-Package Expression.Blend.Sdk
/// Use for deployment:  Release + Any CPU  
